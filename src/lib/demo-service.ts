import { Influencer, Evaluation, DemoInfluencer, getEntityId, toEntityId, ErrorCode, Project, EvaluationScores } from "@/types";
import { logger } from "./logger-service";
import { ErrorService } from "./error-service";

export class DemoService {
  // ‰ΩøÁî®Áµ±‰∏ÄÁöÑ ID È°ûÂûã
  private static projects: Project[] = [];
  private static influencers: { [projectId: string]: Influencer[] } = {};
  private static evaluations: { [projectId: string]: { [influencerId: string]: Evaluation[] } } = {};

  // ÂàùÂßãÂåñÊñπÊ≥ï
  private static initialize() {
    // Ê™¢Êü•ÊòØÂê¶Â∑≤Á∂ìÂàùÂßãÂåñÈÅé
    if (this.projects.length > 0) {
      return;
    }

    // Âú®ÂÆ¢Êà∂Á´ØÂæû localStorage ËÆÄÂèñË≥áÊñô
    if (typeof window !== 'undefined') {
      try {
        const savedProjects = localStorage.getItem('demo-projects');
        const savedInfluencers = localStorage.getItem('demo-influencers');
        const savedEvaluations = localStorage.getItem('demo-evaluations');

        if (savedProjects) {
          this.projects = JSON.parse(savedProjects);
        } else {
          // ÂàùÂßãÂåñÈ†êË®≠Â∞àÊ°à
          this.initializeDefaults();
        }

        if (savedInfluencers) {
          this.influencers = JSON.parse(savedInfluencers);
        } else {
          this.influencers = { 'demo-project-1': [] };
        }

        if (savedEvaluations) {
          this.evaluations = JSON.parse(savedEvaluations);
        } else {
          this.evaluations = { 'demo-project-1': {} };
        }
      } catch (error) {
        console.warn('ËÆÄÂèñÊú¨Âú∞Â≠òÂÑ≤Â§±ÊïóÔºå‰ΩøÁî®È†êË®≠Ë≥áÊñô:', error);
        this.initializeDefaults();
      }
    } else {
      // ÊúçÂãôÂô®Á´ØÁõ¥Êé•‰ΩøÁî®È†êË®≠Ë≥áÊñô
      console.log('üîß DemoService: ÊúçÂãôÂô®Á´ØÂàùÂßãÂåñ');
      this.initializeDefaults();
    }
  }

  // ÂàùÂßãÂåñÈ†êË®≠Ë≥áÊñô
  private static initializeDefaults() {
    this.projects = [
      {
        id: 'demo-project-1',
        name: 'AI ÂàÜÊûêÂ∞àÊ°à',
        description: 'Demo Â∞àÊ°àÁî®ÊñºÂ±ïÁ§∫ KOL Ë©ï‰º∞ÂäüËÉΩ',
        budget: '100,000',
        startDate: '2024-01-01',
        endDate: '2024-12-31',
        status: 'active' as const,
        createdAt: new Date(),
        createdBy: 'demo-user',
        permissions: { 'demo-user': 'owner' as const },
        isPublic: false
      }
    ];
    this.influencers = { 'demo-project-1': [] };
    this.evaluations = { 'demo-project-1': {} };
  }

  // ‰øùÂ≠òË≥áÊñôÂà∞ localStorage
  private static saveToStorage() {
    if (typeof window !== 'undefined') {
      try {
        localStorage.setItem('demo-projects', JSON.stringify(this.projects));
        localStorage.setItem('demo-influencers', JSON.stringify(this.influencers));
        localStorage.setItem('demo-evaluations', JSON.stringify(this.evaluations));
      } catch (error) {
        console.warn('‰øùÂ≠òÂà∞Êú¨Âú∞Â≠òÂÑ≤Â§±Êïó:', error);
      }
    }
  }
  private static influencerCallbacks: { [projectId: string]: ((influencers: Influencer[]) => void)[] } = {};
  private static evaluationCallbacks: { [projectId: string]: { [influencerId: string]: ((evaluations: Evaluation[]) => void)[] } } = {};
  private static projectCallbacks: ((projects: Project[]) => void)[] = [];

  // Project operations
  static async getProjects(): Promise<Project[]> {
    try {
      this.initialize();
      logger.info('Áç≤ÂèñÂ∞àÊ°àÂàóË°®');
      return [...this.projects];
    } catch (error) {
      ErrorService.handleError(error as Error, ErrorCode.DATA_INVALID, { operation: 'getProjects' });
      return [];
    }
  }

  static async createProject(name: string): Promise<void> {
    try {
      const newProject: Project = {
        id: toEntityId(Date.now()),
        name,
        description: 'Êñ∞Âª∫Â∞àÊ°à',
        budget: '50,000',
        startDate: new Date().toISOString().split('T')[0],
        endDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        status: 'planning' as const,
        createdAt: new Date(),
        createdBy: 'demo-user',
        permissions: { 'demo-user': 'owner' as const },
        isPublic: false
      };

      this.projects.push(newProject);
      this.influencers[newProject.id] = [];
      this.evaluations[newProject.id] = {};
      this.saveToStorage();
      this.triggerProjectCallback();
      
      logger.info('ÂâµÂª∫Â∞àÊ°àÊàêÂäü', { projectId: newProject.id, name });
    } catch (error) {
      ErrorService.handleError(error as Error, ErrorCode.DATA_INVALID, { operation: 'createProject', name });
      throw error;
    }
  }

  static subscribeToProjects(callback: (projects: Project[]) => void): () => void {
    this.projectCallbacks.push(callback);
    
    // Á´ãÂç≥Ë™øÁî®‰∏ÄÊ¨°
    callback(this.projects);

    return () => {
      this.projectCallbacks = this.projectCallbacks.filter(cb => cb !== callback);
    };
  }

  static async getInfluencers(projectId: string): Promise<Influencer[]> {
    try {
      this.initialize();
      logger.info('Áç≤ÂèñÁ∂≤Á¥ÖÂàóË°®', { projectId });
      return this.influencers[projectId] || [];
    } catch (error) {
      ErrorService.handleError(error as Error, ErrorCode.DATA_INVALID, { operation: 'getInfluencers', projectId });
      return [];
    }
  }

  static async createInfluencer(projectId: string, influencerData: Omit<Influencer, 'id' | 'createdAt' | 'latestScore'>): Promise<Influencer> {
    try {
      // Á¢∫‰øùÊï∏ÊìöÁµêÊßãÂ∑≤ÂàùÂßãÂåñ
      this.initialize();
      
      const newInfluencer: Influencer = {
        ...influencerData,
        id: toEntityId(Date.now()), // ‰ΩøÁî®Áµ±‰∏ÄÁöÑ ID ËΩâÊèõ
        createdAt: new Date(),
        latestScore: (influencerData as any).latestScore || null // ‰øùÁïôÂÇ≥ÂÖ•ÁöÑÂàÜÊï∏ÔºåÂ¶ÇÊûúÊúâÁöÑË©±
      };

      if (!this.influencers[projectId]) {
        this.influencers[projectId] = [];
      }

      this.influencers[projectId].push(newInfluencer);
      this.saveToStorage();
      this.triggerInfluencerCallback(projectId);
      
      logger.info('ÂâµÂª∫Á∂≤Á¥ÖÊàêÂäü', { 
        projectId, 
        influencerId: newInfluencer.id,
        influencerName: newInfluencer.profile.name 
      });

      return newInfluencer;
    } catch (error) {
      ErrorService.handleError(error as Error, ErrorCode.DATA_INVALID, { 
        operation: 'createInfluencer', 
        projectId,
        influencerData 
      });
      throw error;
    }
  }

  static subscribeToInfluencers(projectId: string, callback: (influencers: Influencer[]) => void): () => void {
    if (!this.influencerCallbacks[projectId]) {
      this.influencerCallbacks[projectId] = [];
    }
    this.influencerCallbacks[projectId].push(callback);

    // Á´ãÂç≥Ë™øÁî®‰∏ÄÊ¨°
    const influencers = this.influencers[projectId] || [];
    console.log(`üîç DemoService: Ë®ÇÈñ±Á∂≤Á¥ÖË≥áÊñôÔºåÂ∞àÊ°à ${projectId}ÔºåÁ∂≤Á¥ÖÊï∏Èáè: ${influencers.length}`);
    callback(influencers);

    return () => {
      this.influencerCallbacks[projectId] = this.influencerCallbacks[projectId].filter(cb => cb !== callback);
    };
  }

  // Ë™øË©¶ÊñπÊ≥ïÔºöÊ™¢Êü•Á∂≤Á¥ÖË≥áÊñô
  static debugInfluencers(projectId: string): void {
    const influencers = this.influencers[projectId] || [];
    console.log(`üîç DemoService Ë™øË©¶ - Â∞àÊ°à ${projectId}:`, {
      Á∂≤Á¥ÖÊï∏Èáè: influencers.length,
      Á∂≤Á¥ÖÂàóË°®: influencers.map(inf => ({
        id: inf.id,
        name: inf.profile?.name,
        platform: inf.platform,
        score: inf.latestScore
      }))
    });
  }

  static async updateInfluencerScore(projectId: string, influencerId: string, score: number): Promise<void> {
    try {
      const influencers = this.influencers[projectId] || [];
      const influencer = influencers.find(inf => inf.id === influencerId);
      
      if (influencer) {
        influencer.latestScore = score;
        this.triggerInfluencerCallback(projectId);
        
        logger.info('Êõ¥Êñ∞Á∂≤Á¥ÖÂàÜÊï∏', { 
          projectId, 
          influencerId, 
          score 
        });
      }
    } catch (error) {
      ErrorService.handleError(error as Error, ErrorCode.DATA_INVALID, { 
        operation: 'updateInfluencerScore', 
        projectId, 
        influencerId, 
        score 
      });
      throw error;
    }
  }

  static async getEvaluations(projectId: string, influencerId: string): Promise<Evaluation[]> {
    try {
      // ËôïÁêÜ DemoInfluencer ÁöÑÊï∏Â≠ó ID
      const numericId = parseInt(influencerId, 10);
      if (!isNaN(numericId)) {
        const key = numericId.toString();
        return this.evaluations[projectId]?.[key] || [];
      }
      return this.evaluations[projectId]?.[influencerId] || [];
    } catch (error) {
      ErrorService.handleError(error as Error, ErrorCode.DATA_INVALID, { 
        operation: 'getEvaluations', 
        projectId, 
        influencerId 
      });
      return [];
    }
  }

  static async createEvaluation(
    projectId: string,
    influencerId: string,
    scores: EvaluationScores,
    totalScore: number,
    notes: string,
    evaluatedBy: string
  ): Promise<void> {
    try {
      const newEvaluation: Evaluation = {
        id: toEntityId(Date.now()),
        scores,
        totalScore,
        notes,
        evaluatedBy,
        evaluatorName: 'È´îÈ©óÁî®Êà∂',
        createdAt: new Date()
      };

      if (!this.evaluations[projectId]) {
        this.evaluations[projectId] = {};
      }

      // ËôïÁêÜ DemoInfluencer ÁöÑÊï∏Â≠ó ID
      const numericId = parseInt(influencerId, 10);
      const key = !isNaN(numericId) ? numericId.toString() : influencerId;

      if (!this.evaluations[projectId][key]) {
        this.evaluations[projectId][key] = [];
      }

      this.evaluations[projectId][key].unshift(newEvaluation);
      this.triggerEvaluationCallback(projectId, influencerId);
      
      // Update influencer score
      await this.updateInfluencerScore(projectId, influencerId, totalScore);
      
      logger.info('ÂâµÂª∫Ë©ï‰º∞ÊàêÂäü', { 
        projectId, 
        influencerId, 
        evaluationId: newEvaluation.id 
      });
    } catch (error) {
      ErrorService.handleError(error as Error, ErrorCode.DATA_INVALID, { 
        operation: 'createEvaluation', 
        projectId, 
        influencerId,
        scores,
        totalScore,
        notes,
        evaluatedBy
      });
      throw error;
    }
  }

  static async addEvaluation(
    projectId: string,
    influencerId: string,
    evaluation: Omit<Evaluation, 'id' | 'createdAt'>
  ): Promise<void> {
    try {
      const newEvaluation: Evaluation = {
        ...evaluation,
        id: toEntityId(Date.now()),
        createdAt: new Date()
      };

      if (!this.evaluations[projectId]) {
        this.evaluations[projectId] = {};
      }

      // ËôïÁêÜ DemoInfluencer ÁöÑÊï∏Â≠ó ID
      const numericId = parseInt(influencerId, 10);
      const key = !isNaN(numericId) ? numericId.toString() : influencerId;

      if (!this.evaluations[projectId][key]) {
        this.evaluations[projectId][key] = [];
      }

      this.evaluations[projectId][key].unshift(newEvaluation);
      this.triggerEvaluationCallback(projectId, influencerId);
      
      logger.info('Ê∑ªÂä†Ë©ï‰º∞ÊàêÂäü', { 
        projectId, 
        influencerId, 
        evaluationId: newEvaluation.id 
      });
    } catch (error) {
      ErrorService.handleError(error as Error, ErrorCode.DATA_INVALID, { 
        operation: 'addEvaluation', 
        projectId, 
        influencerId,
        evaluation 
      });
      throw error;
    }
  }

  static subscribeToEvaluations(
    projectId: string,
    influencerId: string,
    callback: (evaluations: Evaluation[]) => void
  ): () => void {
    if (!this.evaluationCallbacks[projectId]) {
      this.evaluationCallbacks[projectId] = {};
    }
    if (!this.evaluationCallbacks[projectId][influencerId]) {
      this.evaluationCallbacks[projectId][influencerId] = [];
    }

    this.evaluationCallbacks[projectId][influencerId].push(callback);

    // Á´ãÂç≥Ë™øÁî®‰∏ÄÊ¨°
    this.getEvaluations(projectId, influencerId).then(callback);

    return () => {
      this.evaluationCallbacks[projectId][influencerId] = this.evaluationCallbacks[projectId][influencerId].filter(cb => cb !== callback);
    };
  }

  // Âº∑Âà∂ÂæûÊú¨Âú∞Â≠òÂÑ≤ÈáçÊñ∞ËºâÂÖ•Êï∏ÊìöÔºàÁî®ÊñºÂÆ¢Êà∂Á´ØÔºâ
  static async syncFromServer(): Promise<void> {
    if (typeof window !== 'undefined') {
      try {
        console.log('üîÑ ÂæûÊú¨Âú∞Â≠òÂÑ≤ÈáçÊñ∞ËºâÂÖ•Êï∏Êìö...');
        
        // ÈáçÊñ∞ÂàùÂßãÂåñÔºåÈÄôÊúÉÂæû localStorage ÈáçÊñ∞ËºâÂÖ•Êï∏Êìö
        this.projects = [];
        this.initialize();
        
        // Ëß∏ÁôºÂõûË™ø
        this.triggerInfluencerCallback('demo-project-1');
        this.triggerProjectCallback();
        
        console.log('‚úÖ Êú¨Âú∞Êï∏ÊìöÈáçÊñ∞ËºâÂÖ•ÂÆåÊàê');
      } catch (error) {
        console.error('ÈáçÊñ∞ËºâÂÖ•Êú¨Âú∞Êï∏ÊìöÂ§±Êïó:', error);
      }
    }
  }

  private static triggerProjectCallback(): void {
    const projects = this.projects;
    this.projectCallbacks.forEach(callback => callback(projects));
  }

  private static triggerInfluencerCallback(projectId: string): void {
    const callbacks = this.influencerCallbacks[projectId] || [];
    const influencers = this.influencers[projectId] || [];
    
    console.log(`üîç DemoService: Ëß∏ÁôºÁ∂≤Á¥ÖÂõûË™ø`, {
      projectId,
      ÂõûË™øÊï∏Èáè: callbacks.length,
      Á∂≤Á¥ÖÊï∏Èáè: influencers.length,
      Á∂≤Á¥ÖÂàóË°®: influencers.map(inf => ({
        id: inf.id,
        name: inf.profile?.name,
        platform: inf.platform
      }))
    });
    
    callbacks.forEach(callback => {
      try {
        callback(influencers);
      } catch (error) {
        console.error('üîç DemoService: ÂõûË™øÂü∑Ë°åÂ§±Êïó', error);
      }
    });
  }

  private static triggerEvaluationCallback(projectId: string, influencerId: string): void {
    const callbacks = this.evaluationCallbacks[projectId]?.[influencerId] || [];
    this.getEvaluations(projectId, influencerId).then(evaluations => {
      callbacks.forEach(callback => callback(evaluations));
    });
  }
}
