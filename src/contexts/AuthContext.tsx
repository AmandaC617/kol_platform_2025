"use client";

import { createContext, useContext, useEffect, useState, ReactNode } from "react";
import {
  signInAnonymously,
  signInWithPopup,
  GoogleAuthProvider,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
  onAuthStateChanged,
  User as FirebaseUser,
  updateProfile
} from "firebase/auth";
import { auth, isFirebaseAvailable } from "@/lib/firebase";

interface User {
  uid: string;
  email?: string | null;
  name?: string | null;
  displayName?: string | null;
  photoURL?: string | null;
  isAnonymous?: boolean;
}

interface AuthContextType {
  user: User | null;
  loading: boolean;
  authMethod: 'demo' | 'firebase' | 'google';
  signInWithGoogle: () => Promise<void>;
  signInWithEmail: (email: string, password: string) => Promise<void>;
  signUpWithEmail: (email: string, password: string, displayName?: string) => Promise<void>;
  signInAnonymouslyAsync: () => Promise<void>;
  signInAsDemo: () => void;
  signOutUser: () => Promise<void>;
  isAuthenticated: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(false);
  const [authMethod, setAuthMethod] = useState<'demo' | 'firebase' | 'google'>('firebase');

  useEffect(() => {
    if (typeof window !== 'undefined') {
      const setupAuth = () => {
        if (isFirebaseAvailable() && auth) {
          console.log("üîê Setting up Firebase auth listener");

          const unsubscribe = onAuthStateChanged(auth, (firebaseUser: FirebaseUser | null) => {
            if (firebaseUser) {
              console.log("‚úÖ User authenticated:", firebaseUser.uid);

              const userData: User = {
                uid: firebaseUser.uid,
                email: firebaseUser.email,
                name: firebaseUser.displayName,
                displayName: firebaseUser.displayName,
                photoURL: firebaseUser.photoURL,
                isAnonymous: firebaseUser.isAnonymous
              };

              setUser(userData);
              setAuthMethod(firebaseUser.providerData.some(p => p.providerId === 'google.com') ? 'google' : 'firebase');
            } else {
              console.log("üîì No authenticated user");
              setUser(null);
              setAuthMethod('firebase');
            }
          });

          return unsubscribe;
        } else {
          console.log("üé≠ Firebase not available - using demo mode");
          setAuthMethod('demo');
          return undefined;
        }
      };

      const unsubscribe = setupAuth();
      return () => {
        if (unsubscribe) {
          unsubscribe();
        }
      };
    }
  }, []);

  const signInWithGoogle = async () => {
    if (!isFirebaseAvailable() || !auth) {
      throw new Error("Firebase not available");
    }

    try {
      console.log("üîë Attempting Google sign-in...");
      const provider = new GoogleAuthProvider();
      provider.addScope('email');
      provider.addScope('profile');

      const result = await signInWithPopup(auth, provider);
      console.log("‚úÖ Google sign-in successful:", result.user.uid);
    } catch (error: any) {
      console.error("‚ùå Google sign-in failed:", error);

      // Handle domain authorization errors with detailed guidance
      if (error.message?.includes('requests-from-referer') ||
          error.message?.includes('are-blocked') ||
          error.code === 'auth/unauthorized-domain') {

        const currentDomain = typeof window !== 'undefined' ? window.location.hostname : 'unknown';
        const currentUrl = typeof window !== 'undefined' ? window.location.origin : 'unknown';

        throw new Error(`ÂüüÂêçÊéàÊ¨äÈåØË™§ÔºÅ

ÈúÄË¶ÅÂú®‰ª•‰∏ãÂÖ©ÂÄãÂú∞ÊñπÊ∑ªÂä†ÂüüÂêçÊéàÊ¨äÔºö

1. Firebase Console > Authentication > Settings > Authorized domains
   Ê∑ªÂä†Ôºö${currentDomain}

2. Google Cloud Console > APIs & Services > Credentials > OAuth 2.0
   Âú® "Authorized JavaScript origins" Ê∑ªÂä†Ôºö${currentUrl}

Áï∂ÂâçÂüüÂêçÔºö${currentDomain}
ÈåØË™§Ë©≥ÊÉÖÔºö${error.message}`);
      }

      if (error.code === 'auth/popup-closed-by-user') {
        throw new Error("ÁôªÂÖ•Â∑≤ÂèñÊ∂à");
      } else if (error.code === 'auth/popup-blocked') {
        throw new Error("ÂΩàÂá∫Ë¶ñÁ™óË¢´ÈòªÊìãÔºåË´ãÂÖÅË®±ÂΩàÂá∫Ë¶ñÁ™óÂæåÈáçË©¶");
      } else if (error.code === 'auth/network-request-failed') {
        throw new Error("Á∂≤Ë∑ØÈÄ£Á∑öÂ§±ÊïóÔºåË´ãÊ™¢Êü•Á∂≤Ë∑ØÈÄ£Á∑ö");
      } else {
        throw new Error(`Google ÁôªÂÖ•Â§±Êïó: ${error.message}`);
      }
    }
  };

  const signInWithEmail = async (email: string, password: string) => {
    if (!isFirebaseAvailable() || !auth) {
      throw new Error("Firebase not available");
    }

    try {
      console.log("üìß Attempting email sign-in...");
      const result = await signInWithEmailAndPassword(auth, email, password);
      console.log("‚úÖ Email sign-in successful:", result.user.uid);
    } catch (error: any) {
      console.error("‚ùå Email sign-in failed:", error);

      if (error.code === 'auth/user-not-found') {
        throw new Error("Êâæ‰∏çÂà∞Ê≠§ÈõªÂ≠êÈÉµ‰ª∂Â∞çÊáâÁöÑÂ∏≥Êà∂");
      } else if (error.code === 'auth/wrong-password') {
        throw new Error("ÂØÜÁ¢ºÈåØË™§");
      } else if (error.code === 'auth/invalid-email') {
        throw new Error("ÈõªÂ≠êÈÉµ‰ª∂Ê†ºÂºèÁÑ°Êïà");
      } else if (error.code === 'auth/too-many-requests') {
        throw new Error("ÂòóË©¶Ê¨°Êï∏ÈÅéÂ§öÔºåË´ãÁ®çÂæåÂÜçË©¶");
      } else {
        throw new Error(`ÁôªÂÖ•Â§±Êïó: ${error.message}`);
      }
    }
  };

  const signUpWithEmail = async (email: string, password: string, displayName?: string) => {
    if (!isFirebaseAvailable() || !auth) {
      throw new Error("Firebase not available");
    }

    try {
      console.log("üìù Attempting email sign-up...");
      const result = await createUserWithEmailAndPassword(auth, email, password);

      if (displayName && result.user) {
        await updateProfile(result.user, {
          displayName: displayName
        });
      }

      console.log("‚úÖ Email sign-up successful:", result.user.uid);
    } catch (error: any) {
      console.error("‚ùå Email sign-up failed:", error);

      if (error.code === 'auth/email-already-in-use') {
        throw new Error("Ê≠§ÈõªÂ≠êÈÉµ‰ª∂Â∑≤Ë¢´‰ΩøÁî®");
      } else if (error.code === 'auth/weak-password') {
        throw new Error("ÂØÜÁ¢ºÂº∑Â∫¶‰∏çË∂≥ÔºåË´ã‰ΩøÁî®Ëá≥Â∞ë 6 ÂÄãÂ≠óÂÖÉ");
      } else if (error.code === 'auth/invalid-email') {
        throw new Error("ÈõªÂ≠êÈÉµ‰ª∂Ê†ºÂºèÁÑ°Êïà");
      } else {
        throw new Error(`Ë®ªÂÜäÂ§±Êïó: ${error.message}`);
      }
    }
  };

  const signInAnonymouslyAsync = async () => {
    if (!isFirebaseAvailable() || !auth) {
      throw new Error("Firebase not available");
    }

    try {
      console.log("üë§ Attempting anonymous sign-in...");
      const result = await signInAnonymously(auth);
      console.log("‚úÖ Anonymous sign-in successful:", result.user.uid);
    } catch (error: any) {
      console.error("‚ùå Anonymous sign-in failed:", error);
      throw new Error(`ÂåøÂêçÁôªÂÖ•Â§±Êïó: ${error.message}`);
    }
  };

  const signInAsDemo = () => {
    console.log("üé≠ Creating demo user...");
    const demoUser: User = {
      uid: 'demo-user', // ‰ΩøÁî®Âõ∫ÂÆöÁöÑ demo Áî®Êà∂ IDÔºåËàá API ‰øùÊåÅ‰∏ÄËá¥
      email: 'demo.user@example.com',
      name: 'È´îÈ©óÁî®Êà∂',
      displayName: 'È´îÈ©óÁî®Êà∂',
      photoURL: 'https://placehold.co/40x40/6366f1/ffffff?text=Demo',
      isAnonymous: false
    };

    setUser(demoUser);
    setAuthMethod('demo');
    console.log("‚úÖ Demo user created:", demoUser.uid);
  };

  const signOutUser = async () => {
    if (authMethod === 'demo') {
      setUser(null);
      setAuthMethod('firebase');
      return;
    }

    if (!isFirebaseAvailable() || !auth) {
      throw new Error("Firebase not available");
    }

    try {
      console.log("üëã Signing out...");
      await signOut(auth);
      console.log("‚úÖ Sign out successful");
    } catch (error: any) {
      console.error("‚ùå Sign out failed:", error);
      throw new Error(`ÁôªÂá∫Â§±Êïó: ${error.message}`);
    }
  };

  const value: AuthContextType = {
    user,
    loading,
    authMethod,
    signInWithGoogle,
    signInWithEmail,
    signUpWithEmail,
    signInAnonymouslyAsync,
    signInAsDemo,
    signOutUser,
    isAuthenticated: !!user
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}
